const http = require('http');
const WebSocket = require('ws');

// Port server HTTP
const PORT = process.env.PORT || 10000;

// D·ªØ li·ªáu hi·ªán t·∫°i
let currentData = {
    phien_truoc: null,
    ket_qua: "",
    Dice: [],
    phien_hien_tai: null,
    du_doan: "",
    do_tin_cay: "N/A",
    cau: "",
    ngay: "",
    Id: "@ghetvietcode - Rinkivana"
};

// L·ªãch s·ª≠ pattern T/X d·∫°ng chu·ªói (d√πng ƒë·ªÉ hi·ªÉn th·ªã 'c·∫ßu')
let patternHistory = "";
// L·ªãch s·ª≠ k·∫øt qu·∫£ d·∫°ng m·∫£ng (d√πng cho thu·∫≠t to√°n d·ª± ƒëo√°n m·ªõi)
let fullHistory = [];

/**
 * C·∫≠p nh·∫≠t l·ªãch s·ª≠ v√† hi·ªÉn th·ªã c·∫ßu
 * @param {string} result - 't' ho·∫∑c 'x'
 */
function updatePatternHistory(result) {
    if (patternHistory.length >= 20) {
        patternHistory = patternHistory.slice(1);
    }
    patternHistory += result;
    currentData.cau = patternHistory;
}

/**
 * THU·∫¨T TO√ÅN D·ª∞ ƒêO√ÅN M·ªöI
 * @param {string[]} history - M·∫£ng l·ªãch s·ª≠ k·∫øt qu·∫£, v√≠ d·ª•: ["T√†i", "X·ªâu", "T√†i"]
 * @returns {string} - "T√†i" ho·∫∑c "X·ªâu"
 */
function predictNext(history) {
    // 1. ƒêi·ªÅu ki·ªán kh·ªüi ƒë·∫ßu
    if (history.length < 4) return history.at(-1) || "T√†i";

    const last = history.at(-1);

    // 2. C·∫ßu b·ªát (4 k·∫øt qu·∫£ cu·ªëi gi·ªëng nhau)
    if (history.slice(-4).every(k => k === last)) return last;

    // 3. C·∫ßu 2-2 (v√≠ d·ª•: X·ªâu, X·ªâu, T√†i, T√†i)
    if (
        history.length >= 4 &&
        history.at(-1) === history.at(-2) &&
        history.at(-3) === history.at(-4) &&
        history.at(-1) !== history.at(-3)
    ) {
        return last === "T√†i" ? "X·ªâu" : "T√†i";
    }

    // 4. C·∫ßu 1-2-1 (v√≠ d·ª•: T√†i, X·ªâu, X·ªâu, T√†i)
    const last4 = history.slice(-4);
    if (last4[0] !== last4[1] && last4[1] === last4[2] && last4[2] !== last4[3]) {
        return last === "T√†i" ? "X·ªâu" : "T√†i";
    }

    // 5. C·∫ßu l·∫∑p 3-3 (v√≠ d·ª•: T-X-T-T-X-T)
    const pattern = history.slice(-6, -3).toString();
    const latest = history.slice(-3).toString();
    if (pattern === latest) return history.at(-1);

    // 6. Quy t·∫Øc l·ªói (s·∫Ω kh√¥ng bao gi·ªù ch·∫°y v·ªõi ch·ªâ 2 k·∫øt qu·∫£ T/X)
    if (new Set(history.slice(-3)).size === 3) {
        return Math.random() < 0.5 ? "T√†i" : "X·ªâu";
    }

    // 7. M·∫∑c ƒë·ªãnh: Ch·ªëng l·∫°i k·∫øt qu·∫£ ƒëa s·ªë
    const count = history.reduce((acc, val) => {
        acc[val] = (acc[val] || 0) + 1;
        return acc;
    }, {});
    // S·ª≠a l·ªói: th√™m `|| 0` ƒë·ªÉ tr√°nh l·ªói khi m·ªôt b√™n ch∆∞a xu·∫•t hi·ªán
    return (count["T√†i"] || 0) > (count["X·ªâu"] || 0) ? "X·ªâu" : "T√†i";
}


// Th√¥ng tin WebSocket
const WS_URL = "wss://websocket.atpman.net/websocket";
const HEADERS = {
    "Host": "websocket.atpman.net",
    "Origin": "https://play.789club.sx",
    "User-Agent": "Mozilla/5.0",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "vi-VN,vi;q=0.9",
    "Pragma": "no-cache",
    "Cache-Control": "no-cache"
};

let lastEventId = 19;

// Message ƒëƒÉng nh·∫≠p + subscribe
const LOGIN_MESSAGE = [
    1, "MiniGame", "thatoidimoo11233", "112233",
    {
        info: JSON.stringify({
            ipAddress: "2405:4802:18c2:5990:3f0:c150:861d:5427",
            userId: "6ba5b041-a68d-4468-95d3-0bb2d8674512",
            username: "S8_thatoidimoo11233",
            timestamp: 1752497763866,
            refreshToken: "c6c49a4ff8ca49ac87fcaf2543a96221.6f17553681b74176a4ebeb77f475f443"
        }),
        signature: "5F953D843B438DD810A98D903AD3623CE98AED1745C3925EEAFD2A5BEB4D86A24ED0B97129E6AAB5DA1C3F73C2A236AE06D08EDDD937991260DFEA543E8F1C8818A651BDF4204E97A53F0461B306A95A6D7D56F435326270E9E4CB8084BB93969BFD4DB3CA8E519D079324E47110BCC23AB2139508D9E762407B76DE542D6E68"
    }
];

const SUBSCRIBE_TX_RESULT = [6, "MiniGame", "taixiuUnbalancedPlugin", { cmd: 2000 }];
const SUBSCRIBE_LOBBY = [6, "MiniGame", "lobbyPlugin", { cmd: 10001 }];

// K·∫øt n·ªëi v√† x·ª≠ l√Ω WebSocket
function connectWebSocket() {
    const ws = new WebSocket(WS_URL, { headers: HEADERS });

    ws.on('open', () => {
        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi WebSocket");
        ws.send(JSON.stringify(LOGIN_MESSAGE));

        setTimeout(() => {
            ws.send(JSON.stringify(SUBSCRIBE_TX_RESULT));
            ws.send(JSON.stringify(SUBSCRIBE_LOBBY));
        }, 1000);

        setInterval(() => ws.send("2"), 10000);
        setInterval(() => ws.send(JSON.stringify(SUBSCRIBE_TX_RESULT)), 30000);
        setInterval(() => ws.send(JSON.stringify([7, "Simms", lastEventId, 0, { id: 0 }])), 15000);
    });

    ws.on('message', (msg) => {
        try {
            const data = JSON.parse(msg);

            if (Array.isArray(data)) {
                if (data[0] === 7 && data[1] === "Simms" && Number.isInteger(data[2])) {
                    lastEventId = data[2];
                }

                if (data[1]?.cmd === 2006) {
                    const { sid, d1, d2, d3 } = data[1];
                    const tong = d1 + d2 + d3;
                    const ketqua = tong >= 11 ? "T√†i" : "X·ªâu";
                    const diceArray = [d1, d2, d3];
                    
                    // C·∫≠p nh·∫≠t l·ªãch s·ª≠ cho thu·∫≠t to√°n m·ªõi
                    fullHistory.push(ketqua);
                    
                    // C·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë·ªÉ tr·∫£ v·ªÅ API
                    currentData.phien_truoc = currentData.phien_hien_tai;
                    currentData.phien_hien_tai = sid;
                    currentData.Dice = diceArray;
                    currentData.ket_qua = ketqua;

                    // C·∫≠p nh·∫≠t chu·ªói c·∫ßu ƒë·ªÉ hi·ªÉn th·ªã
                    const resultTX = ketqua === "T√†i" ? 't' : 'x';
                    updatePatternHistory(resultTX);

                    // L·∫•y d·ª± ƒëo√°n t·ª´ thu·∫≠t to√°n m·ªõi
                    const duDoan = predictNext(fullHistory);
                    currentData.du_doan = duDoan;
                    currentData.ngay = new Date().toLocaleString("vi-VN", { timeZone: "Asia/Ho_Chi_Minh" });

                    console.log("üé≤", currentData);
                }
            }
        } catch (err) {
            console.error("‚ùå L·ªói message:", err.message);
        }
    });

    ws.on('close', () => {
        console.log("üîå WebSocket b·ªã ƒë√≥ng. K·∫øt n·ªëi l·∫°i sau 5s‚Ä¶");
        setTimeout(connectWebSocket, 5000);
    });

    ws.on('error', (err) => {
        console.error("‚ùå L·ªói WebSocket:", err.message);
    });
}

// HTTP server c√≥ h·ªó tr·ª£ CORS cho https://tooltxwanin.site
const server = http.createServer((req, res) => {
    res.setHeader("Access-Control-Allow-Origin", "https://tooltxwanin.site");
    res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type");

    if (req.method === "OPTIONS") {
        res.writeHead(204);
        res.end();
        return;
    }

    if (req.url === "/taixiu") {
        res.writeHead(200, { "Content-Type": "application/json" });
        res.end(JSON.stringify(currentData));
    } else {
        res.writeHead(404, { "Content-Type": "text/plain" });
        res.end("Kh√¥ng t√¨m th·∫•y");
    }
});

// Kh·ªüi ch·∫°y server
server.listen(PORT, () => {
    console.log(`üåê Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    connectWebSocket();
});
