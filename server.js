const http = require('http');
const WebSocket = require('ws');
const crypto = require('crypto');

// Port server HTTP
const PORT = process.env.PORT || 10000;

// ===== B·ªò THU·∫¨T TO√ÅN D·ª∞ ƒêO√ÅN (CHUY·ªÇN T·ª™ PYTHON) =====

// --- Helper Functions ---
function get_tai_xiu(total) {
    return (total >= 11 && total <= 18) ? "T√†i" : "X·ªâu";
}

function Counter(arr) {
    return arr.reduce((acc, val) => {
        acc[val] = (acc[val] || 0) + 1;
        return acc;
    }, {});
}

// --- THU·∫¨T TO√ÅN 1: Ph√¢n t√≠ch c·∫ßu ƒë·∫∑c bi·ªát ---
function du_doan_v1(totals_list) {
    if (totals_list.length < 4) {
        return ["Ch·ªù", "ƒê·ª£i th√™m d·ªØ li·ªáu ƒë·ªÉ ph√¢n t√≠ch c·∫ßu."];
    }

    const last_4 = totals_list.slice(-4);
    const last_3 = totals_list.slice(-3);
    const last_total = totals_list[totals_list.length - 1];
    const last_result = get_tai_xiu(last_total);

    // C·∫ßu ƒë·∫∑c bi·ªát A-B-A-A
    if (last_4[0] === last_4[2] && last_4[0] === last_4[3] && last_4[0] !== last_4[1]) {
        return ["T√†i", `C·∫ßu ƒë·∫∑c bi·ªát ${last_4.join('-')}. B·∫Øt T√†i theo c√¥ng th·ª©c.`];
    }
    // C·∫ßu sandwich A-B-A
    if (last_3[0] === last_3[2] && last_3[0] !== last_3[1]) {
        return [last_result === "T√†i" ? "X·ªâu" : "T√†i", `C·∫ßu sandwich ${last_3.join('-')}. B·∫ª c·∫ßu!`];
    }
    // S·ªë ƒë·∫∑c bi·ªát
    const special_nums = new Set([7, 9, 10]);
    const count = last_3.filter(total => special_nums.has(total)).length;
    if (count >= 2) {
        return [last_result === "T√†i" ? "X·ªâu" : "T√†i", `Xu·∫•t hi·ªán c·∫∑p s·ªë ƒë·∫∑c bi·ªát trong 3 phi√™n g·∫ßn nh·∫•t. B·∫ª c·∫ßu!`];
    }
    // C·∫ßu nghi√™ng
    const last_6 = totals_list.slice(-6);
    const freq_count = last_6.filter(t => t === last_total).length;
    if (freq_count >= 3) {
        return [get_tai_xiu(last_total), `S·ªë ${last_total} l·∫∑p l·∫°i ${freq_count} l·∫ßn. B·∫Øt theo c·∫ßu nghi√™ng.`];
    }
    // C·∫ßu l·∫∑p l·∫°i
    if (last_3[0] === last_3[2] || last_3[1] === last_3[2]) {
        return [last_result === "T√†i" ? "X·ªâu" : "T√†i", `C·∫ßu l·∫∑p l·∫°i ${last_3[1]}-${last_3[2]} ho·∫∑c ${last_3[0]}-${last_3[2]}. B·∫ª c·∫ßu 1-1.`];
    }
    // M·∫∑c ƒë·ªãnh
    return [last_result === "T√†i" ? "X·ªâu" : "T√†i", "Kh√¥ng c√≥ c·∫ßu ƒë·∫∑c bi·ªát, d·ª± ƒëo√°n theo c·∫ßu 1-1."];
}

// --- THU·∫¨T TO√ÅN 2: Ph√¢n t√≠ch v·ªõi ƒë·ªô tin c·∫≠y ---
function du_doan_v2(totals_list) {
    if (totals_list.length < 4) {
        return ["Ch·ªù", 0, "Ch∆∞a ƒë·ªß d·ªØ li·ªáu ƒë·ªÉ d·ª± ƒëo√°n."];
    }

    const last_result = get_tai_xiu(totals_list[totals_list.length - 1]);

    // Rule definitions
    const rules = [{
        id: "special_pattern",
        exec: (totals) => {
            const last_4 = totals.slice(-4);
            if (last_4[0] === last_4[2] && last_4[0] === last_4[3] && last_4[0] !== last_4[1]) {
                return ["T√†i", 85, `C·∫ßu ƒë·∫∑c bi·ªát ${last_4.join('-')}. B·∫Øt T√†i.`];
            }
        }
    }, {
        id: "sandwich",
        exec: (totals) => {
            const last_3 = totals.slice(-3);
            if (last_3[0] === last_3[2] && last_3[0] !== last_3[1]) {
                return [last_result === "T√†i" ? "X·ªâu" : "T√†i", 83, `C·∫ßu sandwich ${last_3.join('-')}. B·∫ª c·∫ßu!`];
            }
        }
    }, {
        id: "special_numbers",
        exec: (totals) => {
            const last_3 = totals.slice(-3);
            const special_nums = new Set([7, 9, 10]);
            const count = last_3.filter(t => special_nums.has(t)).length;
            if (count >= 2) {
                return [last_result === "T√†i" ? "X·ªâu" : "T√†i", 81, `Xu·∫•t hi·ªán ‚â•2 s·ªë ƒë·∫∑c bi·ªát. B·∫ª c·∫ßu!`];
            }
        }
    }, {
        id: "frequent_repeat",
        exec: (totals) => {
            const last_total = totals[totals.length - 1];
            const last_6 = totals.slice(-6);
            const freq = last_6.filter(t => t === last_total).length;
            if (freq >= 3) {
                return [get_tai_xiu(last_total), 80, `S·ªë ${last_total} l·∫∑p l·∫°i ${freq} l·∫ßn. B·∫Øt theo nghi√™ng c·∫ßu!`];
            }
        }
    }, {
        id: "repeat_pattern",
        exec: (totals) => {
            const last_3 = totals.slice(-3);
            if (last_3[0] === last_3[2] || last_3[1] === last_3[2]) {
                return [last_result === "T√†i" ? "X·ªâu" : "T√†i", 77, `C·∫ßu l·∫∑p d·∫°ng ${last_3.join('-')}. B·∫ª c·∫ßu.`];
            }
        }
    }, ];

    for (const rule of rules) {
        const result = rule.exec(totals_list);
        if (result) return result;
    }

    return [last_result === "T√†i" ? "X·ªâu" : "T√†i", 71, "Kh√¥ng c√≥ c·∫ßu ƒë·∫∑c bi·ªát, b·∫ª c·∫ßu m·∫∑c ƒë·ªãnh."];
}


// --- THU·∫¨T TO√ÅN 3: Ph√¢n t√≠ch chu·ªói v√† extreme ---
function du_doan_v3(totals_list) {
    if (totals_list.length < 4) {
        return ["Ch·ªù", 0, "Kh√¥ng ƒë·ªß d·ªØ li·ªáu"];
    }
    const last_total = totals_list[totals_list.length - 1];
    const last_result = get_tai_xiu(last_total);
    const types_list = totals_list.map(t => get_tai_xiu(t));

    // Rule: chain of same results
    let chain = 1;
    for (let i = types_list.length - 1; i > 0; i--) {
        if (types_list[i] === types_list[i - 1]) {
            chain++;
        } else {
            break;
        }
    }
    if (chain >= 4) {
        const pred = types_list[types_list.length - 1] === "T√†i" ? "X·ªâu" : "T√†i";
        return [pred, 78, `C√≥ chu·ªói ${chain} phi√™n ${types_list[types_list.length - 1]}. ƒê·∫£o chu·ªói!`];
    }

    // Rule: extreme total
    if (last_total <= 5 || last_total >= 16) {
        const pred = last_result === "T√†i" ? "X·ªâu" : "T√†i";
        return [pred, 76, `T·ªïng ƒëi·ªÉm c·ª±c tr·ªã ${last_total}. ƒê·∫£o chi·ªÅu.`];
    }

    return [last_result === "T√†i" ? "X·ªâu" : "T√†i", 70, "Kh√¥ng c√≥ quy t·∫Øc n·ªïi b·∫≠t."];
}

// --- THU·∫¨T TO√ÅN 4: Ph√¢n t√≠ch ƒë∆°n gi·∫£n ---
function du_doan_v4(kq_list, tong_list) {
    let tin_cay = 50;
    if (kq_list.length < 3) return [kq_list.length > 0 ? kq_list.slice(-1)[0] : "Ch·ªù", tin_cay];

    const last_3_kq = kq_list.slice(-3).join('');
    const last_2_kq = kq_list.slice(-2).join('');
    const last_tong = tong_list.slice(-1)[0];

    if (last_3_kq === "T√†iT√†iT√†i") return ["X·ªâu", Math.min(tin_cay + 20, 95)];
    if (last_3_kq === "X·ªâuX·ªâuX·ªâu") return ["T√†i", Math.min(tin_cay + 20, 95)];
    if (last_2_kq === "T√†iX·ªâu") return ["T√†i", Math.min(tin_cay + 10, 95)];
    if (last_tong >= 15) return ["X·ªâu", Math.min(tin_cay + 10, 95)];
    if (last_tong <= 9) return ["T√†i", Math.min(tin_cay + 10, 95)];

    return [kq_list.slice(-1)[0], tin_cay];
}


// --- THU·∫¨T TO√ÅN 5: D·ª± ƒëo√°n theo hash ---
function algo1(input_str) {
    const hash = crypto.createHash('sha256').update(input_str).digest('hex');
    return parseInt(hash, 16) % 100;
}

function algo2(input_str) {
    let sum = 0;
    for (let i = 0; i < input_str.length; i++) {
        sum += input_str.charCodeAt(i);
    }
    return sum % 100;
}

function algo3(input_str) {
    const hash = crypto.createHash('sha1').update(input_str).digest('hex');
    return parseInt(hash.slice(-2), 16) % 100;
}

function du_doan_phan_tram(input_str) {
    const percentage = (algo1(input_str) + algo2(input_str) + algo3(input_str)) / 3;
    return parseFloat(percentage.toFixed(2));
}

// --- THU·∫¨T TO√ÅN 6: D·ª± ƒëo√°n theo x√∫c x·∫Øc ---
function du_doan_theo_xi_ngau(dice_list) {
    if (!dice_list || dice_list.length === 0) return "ƒê·ª£i th√™m d·ªØ li·ªáu";
    const [d1, d2, d3] = dice_list[dice_list.length - 1];
    const total = d1 + d2 + d3;

    const result_list = [d1, d2, d3].map(d => {
        let tmp = d + total;
        if (tmp === 4 || tmp === 5) tmp -= 4;
        else if (tmp >= 6) tmp -= 6;
        return tmp % 2 === 0 ? "T√†i" : "X·ªâu";
    });

    const counts = Counter(result_list);
    return (counts['T√†i'] || 0) >= (counts['X·ªâu'] || 0) ? "T√†i" : "X·ªâu";
}

// --- THU·∫¨T TO√ÅN 7: D·ª± ƒëo√°n theo x√∫c x·∫Øc v·ªõi x√°c su·∫•t ---
function du_doan_theo_xi_ngau_prob(dice_list) {
    if (!dice_list || dice_list.length === 0) return ["ƒê·ª£i th√™m d·ªØ li·ªáu", 0.5];
    const [d1, d2, d3] = dice_list[dice_list.length - 1];
    const total = d1 + d2 + d3;

    const result_list = [d1, d2, d3].map(d => {
        let tmp = d + total;
        if (tmp === 4 || tmp === 5) tmp -= 4;
        else if (tmp >= 6) tmp -= 6;
        return tmp % 2 === 0 ? "T√†i" : "X·ªâu";
    });

    const count_tai = result_list.filter(r => r === "T√†i").length;
    const prob_tai = count_tai / 3;
    const prediction = count_tai >= 2 ? "T√†i" : "X·ªâu";
    return [prediction, prob_tai];
}

// --- THU·∫¨T TO√ÅN 8: Ph√¢n t√≠ch c·∫ßu Sunwin ---
function phan_tich_cau_sunwin(ds_tong) {
    const now = new Date();
    const hour = now.getHours(); // L·∫•y gi·ªù c·ªßa server
    if (hour >= 0 && hour < 5) {
        return {
            du_doan: "Ch·ªù",
            tin_cay: "0%",
            ly_do: "‚ùå Kh√¥ng n√™n √°p d·ª•ng c√¥ng th·ª©c t·ª´ 00:00 ƒë·∫øn 05:00 s√°ng"
        };
    }

    let ket_luan = "";
    let do_tin_cay = 0;

    // Ph√¢n t√≠ch c·∫∑p gi·ªëng nhau
    if (ds_tong.length >= 3 && ds_tong.slice(-1)[0] === ds_tong.slice(-3)[0]) {
        ket_luan += `üîÅ C·∫∑p gi·ªëng nhau: ${ds_tong.slice(-1)[0]} - c√≥ th·ªÉ b·∫ª\n`;
        do_tin_cay += 20;
    }

    // Ph√¢n t√≠ch 3 c·∫ßu li√™n t·ª•c
    if (ds_tong.length >= 3) {
        const [a, b, c] = ds_tong.slice(-3);
        if (a > 10 && b > 10 && c > 10) {
            ket_luan += `‚ö™ 3 c·∫ßu T√†i li√™n t·ª•c -> X·ªâu nh·∫π\n`;
            do_tin_cay += 15;
        }
        if (a <= 10 && b <= 10 && c <= 10) {
            ket_luan += `‚ö´ 3 c·∫ßu X·ªâu li√™n t·ª•c -> T√†i nh·∫π\n`;
            do_tin_cay += 15;
        }
    }

    // Ph√¢n t√≠ch c·∫ßu b·ªát
    if (ds_tong.length >= 6) {
        const recent = ds_tong.slice(-6);
        const biet_den = recent.slice(0, 5).every(x => x <= 10);
        const biet_trang = recent.slice(0, 5).every(x => x > 10);
        if (biet_den && recent[5] > 10) {
            ket_luan += "üìâ C·∫ßu b·ªát X·ªâu b·ªã l·ªách - b·∫ª T√†i nh·∫π\n";
            do_tin_cay += 10;
        }
        if (biet_trang && recent[5] <= 10) {
            ket_luan += "üìà C·∫ßu b·ªát T√†i b·ªã l·ªách - b·∫ª X·ªâu nh·∫π\n";
            do_tin_cay += 10;
        }
    }

    // Ph√¢n t√≠ch t·∫ßn su·∫•t
    const tong_counter = Counter(ds_tong.slice(-10));
    for (const [k, v] of Object.entries(tong_counter)) {
        if (v >= 3 && parseInt(k) <= 10) {
            ket_luan += `üìå T·ªïng ${k} xu·∫•t hi·ªán ${v} l·∫ßn g·∫ßn ƒë√¢y ‚Üí B·∫ª X·ªâu\n`;
            do_tin_cay += 10;
        }
    }

    let du_doan = "‚ùì Ch∆∞a ƒë·ªß d·ªØ ki·ªán ƒë·ªÉ d·ª± ƒëo√°n";
    if (do_tin_cay >= 40) {
        du_doan = ds_tong.slice(-1)[0] > 10 ? "X·ªâu" : "T√†i";
    }

    return {
        du_doan: du_doan,
        tin_cay: `${Math.min(do_tin_cay, 100)}%`,
        ly_do: ket_luan.trim()
    };
}


// --- H√ÄM T·ªîNG H·ª¢P D·ª∞ ƒêO√ÅN ---
function du_doan_tong_hop(totals_list, kq_list, dice_list, ma_phien) {
    if (totals_list.length === 0) {
        return {
            prediction: "Ch·ªù",
            tincay: "0%",
            chi_tiet: {},
            ket_luan: "Ch·ªù d·ªØ li·ªáu phi√™n ƒë·∫ßu ti√™n...",
            tai_count: 0,
            xiu_count: 0
        };
    }
    const chi_tiet = {};

    // V1
    const [du1, ly1] = du_doan_v1(totals_list);
    chi_tiet["v1"] = {
        du_doan: du1,
        ly_do: ly1
    };

    // V2
    const [du2, tin2, ly2] = du_doan_v2(totals_list);
    chi_tiet["v2"] = {
        du_doan: du2,
        tin_cay: `${tin2}%`,
        ly_do: ly2
    };

    // V3
    const [du3, tin3, ly3] = du_doan_v3(totals_list);
    chi_tiet["v3"] = {
        du_doan: du3,
        tin_cay: `${tin3}%`,
        ly_do: ly3
    };

    // V4
    const [du4, tin4] = du_doan_v4(kq_list, totals_list);
    chi_tiet["v4"] = {
        du_doan: du4,
        tin_cay: `${tin4}%`
    };

    // V5
    const tin5 = du_doan_phan_tram(ma_phien);
    chi_tiet["v5"] = {
        du_doan: tin5 >= 50 ? "T√†i" : "X·ªâu",
        tin_cay: `${tin5}%`
    };

    // V6
    const du6 = du_doan_theo_xi_ngau(dice_list);
    chi_tiet["v6"] = {
        du_doan: du6
    };

    // V7
    const [du7, prob7] = du_doan_theo_xi_ngau_prob(dice_list);
    chi_tiet["v7"] = {
        du_doan: du7,
        tin_cay: `${(prob7*100).toFixed(2)}%`
    };

    // V8
    const phan_tich = phan_tich_cau_sunwin(totals_list);
    chi_tiet["v8"] = {
        du_doan: phan_tich.du_doan,
        tin_cay: phan_tich.tin_cay,
        ly_do: phan_tich.ly_do
    };

    // T·ªïng h·ª£p k·∫øt qu·∫£
    const all_du_doan = Object.values(chi_tiet).map(v => v.du_doan).filter(d => d === "T√†i" || d === "X·ªâu");
    const tai_count = all_du_doan.filter(d => d === "T√†i").length;
    const xiu_count = all_du_doan.filter(d => d === "X·ªâu").length;
    let ket_luan = "";
    let final_prediction = "Ch·ªù";

    if (tai_count > xiu_count) {
        ket_luan = `üéØ N√™n ƒë√°nh: T√ÄI (D·ª±a tr√™n ${tai_count}/8 thu·∫≠t to√°n ƒë·ªìng thu·∫≠n)`;
        final_prediction = "T√†i";
    } else if (xiu_count > tai_count) {
        ket_luan = `üéØ N√™n ƒë√°nh: X·ªàU (D·ª±a tr√™n ${xiu_count}/8 thu·∫≠t to√°n ƒë·ªìng thu·∫≠n)`;
        final_prediction = "X·ªâu";
    } else {
        ket_luan = "‚öñÔ∏è T·ªâ l·ªá d·ª± ƒëo√°n c√¢n b·∫±ng T√†i/X·ªâu - C√¢n nh·∫Øc k·ªπ";
        final_prediction = "Ch·ªù";
    }

    return {
        prediction: final_prediction,
        tincay: `${((Math.max(tai_count, xiu_count) / 8) * 100).toFixed(1)}%`,
        chi_tiet: chi_tiet,
        ket_luan: ket_luan,
        tai_count: tai_count,
        xiu_count: xiu_count
    };
}


// ===== LOGIC SERVER =====

// D·ªØ li·ªáu v√† l·ªãch s·ª≠
let totals_list = [];
let kq_list = [];
let dice_list = [];
const MAX_HISTORY = 50; // Gi·ªõi h·∫°n l∆∞u tr·ªØ 50 phi√™n g·∫ßn nh·∫•t

let currentData = {
    phien_truoc: null,
    ket_qua: "",
    Dice: [],
    phien_hien_tai: null,
    du_doan: "",
    do_tin_cay: "N/A",
    ket_luan_tong_hop: "",
    chi_tiet_du_doan: {},
    ngay: "",
    Id: "@ghetvietcode - Rinkivana"
};

// Th√¥ng tin WebSocket
const WS_URL = "wss://websocket.atpman.net/websocket";
const HEADERS = {
    "Host": "websocket.atpman.net",
    "Origin": "https://play.789club.sx",
    "User-Agent": "Mozilla/5.0",
    "Accept-Encoding": "gzip, deflate, br, zstd",
    "Accept-Language": "vi-VN,vi;q=0.9",
    "Pragma": "no-cache",
    "Cache-Control": "no-cache"
};
let lastEventId = 19;
const LOGIN_MESSAGE = [
    1, "MiniGame", "thatoidimoo11233", "112233", {
        info: JSON.stringify({
            ipAddress: "2405:4802:18c2:5990:3f0:c150:861d:5427",
            userId: "6ba5b041-a68d-4468-95d3-0bb2d8674512",
            username: "S8_thatoidimoo11233",
            timestamp: 1752497763866,
            refreshToken: "c6c49a4ff8ca49ac87fcaf2543a96221.6f17553681b74176a4ebeb77f475f443"
        }),
        signature: "5F953D843B438DD810A98D903AD3623CE98AED1745C3925EEAFD2A5BEB4D86A24ED0B97129E6AAB5DA1C3F73C2A236AE06D08EDDD937991260DFEA543E8F1C8818A651BDF4204E97A53F0461B306A95A6D7D56F435326270E9E4CB8084BB93969BFD4DB3CA8E519D079324E47110BCC23AB2139508D9E762407B76DE542D6E68"
    }
];
const SUBSCRIBE_TX_RESULT = [6, "MiniGame", "taixiuUnbalancedPlugin", {
    cmd: 2000
}];
const SUBSCRIBE_LOBBY = [6, "MiniGame", "lobbyPlugin", {
    cmd: 10001
}];

// K·∫øt n·ªëi v√† x·ª≠ l√Ω WebSocket
function connectWebSocket() {
    const ws = new WebSocket(WS_URL, {
        headers: HEADERS
    });

    ws.on('open', () => {
        console.log("‚úÖ ƒê√£ k·∫øt n·ªëi WebSocket");
        ws.send(JSON.stringify(LOGIN_MESSAGE));

        setTimeout(() => {
            ws.send(JSON.stringify(SUBSCRIBE_TX_RESULT));
            ws.send(JSON.stringify(SUBSCRIBE_LOBBY));
        }, 1000);

        setInterval(() => ws.send("2"), 10000);
        setInterval(() => ws.send(JSON.stringify(SUBSCRIBE_TX_RESULT)), 30000);
        setInterval(() => ws.send(JSON.stringify([7, "Simms", lastEventId, 0, {
            id: 0
        }])), 15000);
    });

    ws.on('message', (msg) => {
        try {
            const data = JSON.parse(msg);

            if (Array.isArray(data)) {
                if (data[0] === 7 && data[1] === "Simms" && Number.isInteger(data[2])) {
                    lastEventId = data[2];
                }

                if (data[1] ?.cmd === 2006) {
                    const {
                        sid,
                        d1,
                        d2,
                        d3
                    } = data[1];
                    const tong = d1 + d2 + d3;
                    const ketqua = tong >= 11 ? "T√†i" : "X·ªâu";
                    const diceArray = [d1, d2, d3];
                    const ma_phien_str = String(sid);

                    // C·∫≠p nh·∫≠t l·ªãch s·ª≠
                    totals_list.push(tong);
                    kq_list.push(ketqua);
                    dice_list.push(diceArray);

                    // Gi·ªØ l·ªãch s·ª≠ ·ªü k√≠ch th∆∞·ªõc t·ªëi ƒëa
                    if (totals_list.length > MAX_HISTORY) {
                        totals_list.shift();
                        kq_list.shift();
                        dice_list.shift();
                    }

                    // G·ªçi b·ªô thu·∫≠t to√°n d·ª± ƒëo√°n t·ªïng h·ª£p
                    const result = du_doan_tong_hop(totals_list, kq_list, dice_list, ma_phien_str);

                    // C·∫≠p nh·∫≠t d·ªØ li·ªáu hi·ªán t·∫°i ƒë·ªÉ tr·∫£ v·ªÅ qua API
                    currentData.phien_truoc = currentData.phien_hien_tai;
                    currentData.phien_hien_tai = sid;
                    currentData.Dice = diceArray;
                    currentData.ket_qua = ketqua;
                    currentData.du_doan = result.prediction;
                    currentData.do_tin_cay = result.tincay;
                    currentData.ket_luan_tong_hop = result.ket_luan;
                    currentData.chi_tiet_du_doan = result.chi_tiet; // D·ªØ li·ªáu chi ti·∫øt
                    currentData.ngay = new Date().toLocaleString("vi-VN", {
                        timeZone: "Asia/Ho_Chi_Minh"
                    });


                    console.log("üé≤ Phi√™n m·ªõi:", sid, "| K·∫øt qu·∫£:", `${tong} (${ketqua})`, "| D·ª± ƒëo√°n:", result.prediction, `(${result.tincay})`);
                }
            }
        } catch (err) {
            // B·ªè qua l·ªói parse JSON kh√¥ng h·ª£p l·ªá
            if (!(err instanceof SyntaxError)) {
                console.error("‚ùå L·ªói message:", err.message);
            }
        }
    });

    ws.on('close', () => {
        console.log("üîå WebSocket b·ªã ƒë√≥ng. K·∫øt n·ªëi l·∫°i sau 5s‚Ä¶");
        setTimeout(connectWebSocket, 5000);
    });

    ws.on('error', (err) => {
        console.error("‚ùå L·ªói WebSocket:", err.message);
    });
}

// HTTP server c√≥ h·ªó tr·ª£ CORS cho https://tooltxwanin.site
const server = http.createServer((req, res) => {
    res.setHeader("Access-Control-Allow-Origin", "https://tooltxwanin.site");
    res.setHeader("Access-Control-Allow-Methods", "GET, OPTIONS");
    res.setHeader("Access-Control-Allow-Headers", "Content-Type");

    if (req.method === "OPTIONS") {
        res.writeHead(204);
        res.end();
        return;
    }

    if (req.url === "/taixiu") {
        res.writeHead(200, {
            "Content-Type": "application/json"
        });
        res.end(JSON.stringify(currentData));
    } else {
        res.writeHead(404, {
            "Content-Type": "text/plain"
        });
        res.end("Kh√¥ng t√¨m th·∫•y");
    }
});

// Kh·ªüi ch·∫°y server
server.listen(PORT, () => {
    console.log(`üåê Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
    connectWebSocket();
});
